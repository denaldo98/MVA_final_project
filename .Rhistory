addEllipses = TRUE
)
library(MASS)
(model <- lda(y~., data = data_dummy))
plot(model)
data_dummy <- data_dummy %>% relocate(y, .after = "pdays_Over 1.5yrs")
str(data_dummy)
set.seed(123)
#Training & Test Datasets
deposit_yes <- data_dummy[which(data_dummy$y == 1), ]  # all yes's of target class
deposit_no <- data_dummy[which(data_dummy$y ==  0), ]  # all no's of target class
deposit_yes_training_rows <- sample(1:nrow(deposit_yes), 0.8*nrow(deposit_yes))  #randomly choosing 80% observations of yes class
deposit_no_training_rows <- sample(1:nrow(deposit_no), 0.8*nrow(deposit_no))  #randomly choosing 80% observations of no class
training_yes <- deposit_yes[deposit_yes_training_rows, ]
training_no <- deposit_no[deposit_no_training_rows, ]
trainingData <- rbind(training_yes, training_no)  #combining chosen observations
glimpse(trainingData)
table(trainingData$y)
# Create Test Data
test_yes <- deposit_yes[-deposit_yes_training_rows, ]
test_no <- deposit_no[-deposit_no_training_rows, ]
testData <- rbind(test_yes, test_no)  #combining chosen observations
glimpse(testData)
table(testData$y)
#save(trainingData, testData, trainingData_scaled, testData_scaled, file = "data.RData")
save(trainingData, testData, file = "data.RData")
fviz_pca_ind(res.pca,
col.ind = data_dummy$y,
repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE    # Avoid text overlapping
)
?fviz_pca_var
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE    # Avoid text overlapping
select.var = list(contrib=20)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE ,   # Avoid text overlapping
select.var = list(contrib=20)
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE ,   # Avoid text overlapping
select.var = list(contrib=10)
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE ,   # Avoid text overlapping
select.var = list(contrib=15)
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE ,   # Avoid text overlapping
select.var = list(contrib=10)
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE ,   # Avoid text overlapping
select.var = list(contrib=10)
)
fviz_pca_var(res.pca,
axes = c(3,4),
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
select.var = list(contrib=10)
)
data_dummy[,"y"] = as.factor(data_dummy[,"y"])
fviz_pca_biplot(res.pca, repel = TRUE,
axes = c(1,2),
col.var = "black", # Variables color
col.ind = data_dummy$y,
addEllipses = TRUE
)
library(MASS)
(model <- lda(y~., data = data_dummy))
plot(model)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
rm(list = ls())
library(dplyr)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(stats)
library(gplots)
library(factoextra)
library(FactoMineR)
data = read.csv("bank.csv", sep = ";", header = TRUE)
data$ID <- seq.int(nrow(data))
data <- data %>%
select(ID, everything())
head(data)
dim(data)
str(data)
data[,"job"] = as.factor(data[,"job"])
data[,"marital"] = as.factor(data[,"marital"])
data[,"education"] = as.factor(data[,"education"])
data[,"default"] = as.factor(data[,"default"])
data[,"housing"] = as.factor(data[,"housing"])
data[,"loan"] = as.factor(data[,"loan"])
data[,"contact"] = as.factor(data[,"contact"])
data[,"month"] = as.factor(data[,"month"])
data[,"poutcome"] = as.factor(data[,"poutcome"])
data[,"y"] = as.factor(data[,"y"])
str(data)
data %>%
sample_n(., 10, replace=FALSE) %>%
kbl(caption = "Marketing Campaigns of Portuguese Bank (sample of 20)") %>%
kable_classic(full_width = F, html_font = "Cambria")
data %>%
summary(.) %>%
kbl(caption = "Basic statistics. Marketing Campaigns of Portuguese Bank") %>%
kable_classic(full_width = F, html_font = "Cambria")
colSums((is.na((data))))
p <- ggplot(data, aes(x=job, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "job variable",
x = "job",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=marital, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "marital variable",
x = "marital",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=education, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "education variable",
x = "education",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=default, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "default variable",
x = "default",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=housing, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "housing variable",
x = "housing",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=loan, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "loan variable",
x = "loan",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=contact, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "contact variable",
x = "contact",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=month, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "month variable",
x = "month",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
p <- ggplot(data, aes(x=poutcome, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "poutcome variable",
x = "poutcome",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
data$poutcome[data$poutcome=="other"] <- "unknown"
p <- ggplot(data, aes(x=poutcome, fill=y))+
geom_bar(stat="count", width=0.9 )+
labs(
title = "poutcome variable",
x = "poutcome",
y = "count"
)+
scale_fill_brewer(palette="Paired")+
theme_grey()
p + coord_flip()
g1 <- ggplot(data, aes(x=age)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g2 <- ggplot(data, aes(x=balance)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g3 <- ggplot(data, aes(x=day)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g4 <- ggplot(data, aes(x=duration)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g5 <- ggplot(data, aes(x=campaign)) +
geom_histogram(alpha=0.6, fill="#69b3a2", color="#e9ecef", alpha=0.8)
g6 <- ggplot(data, aes(x=pdays)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g7 <- ggplot(data, aes(x=previous)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
grid.arrange(g1,g2, nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7, nrow=1);
g1 <- ggplot(data, aes(x=age, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="right")
g2 <- ggplot(data, aes(x=balance, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="none")
g3 <- ggplot(data, aes(x=day, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="none")
g4 <- ggplot(data, aes(x=duration, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="none")
g5 <- ggplot(data, aes(x=campaign, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="none")
g6 <- ggplot(data, aes(x=pdays, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="none")
g7 <- ggplot(data, aes(x=previous, fill=y)) +
geom_histogram(alpha = 0.7) + theme_grey() +
theme(legend.position="none")
grid.arrange(g1,g2, nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7, nrow=1);
library(gridExtra)
g1 <- ggplot(data,aes(x=y, y=age, fill=y)) +
geom_boxplot() +
theme(legend.position="right")
g2 <- ggplot(data,aes(x=y, y=balance, fill=y)) +
geom_boxplot() +
theme(legend.position="none")
g3 <- ggplot(data,aes(x=y, y=day, fill=y)) +
geom_boxplot() +
theme(legend.position="none")
g4 <- ggplot(data,aes(x=y, y=duration, fill=y)) +
geom_boxplot() +
theme(legend.position="none")
g5 <- ggplot(data,aes(x=y, y=campaign, fill=y)) +
geom_boxplot() +
theme(legend.position="none")
g6 <- ggplot(data,aes(x=y, y=pdays, fill=y)) +
geom_boxplot() +
theme(legend.position="none")
g7 <- ggplot(data,aes(x=y, y=previous, fill=y)) +
geom_boxplot() +
theme(legend.position="none")
grid.arrange(g1,g2,nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,nrow=1);
arr = c(order(data$balance, decreasing=TRUE)[1:10])
data[arr,]
#grab the outliers
outliers = boxplot(data$balance, plot=FALSE)$out
#Extract the outliers from the original data frame
data[data$balance %in% outliers,]
arr = c(order(data$balance, decreasing=TRUE)[1:2])
data = data[-arr, ]
ggplot(data,aes(x=y, y=balance, fill=y)) +
geom_boxplot()
ggplot(data, aes(x=balance)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
arr = c(order(data$campaign, decreasing=TRUE)[1:10])
data[arr,]
arr = c(order(data$campaign, decreasing=TRUE)[1:2])
data = data[-arr, ]
ggplot(data,aes(x=y, y=campaign, fill=y)) +
geom_boxplot()
ggplot(data, aes(x=campaign)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
arr = c(order(data$duration, decreasing=TRUE)[1:20])
data[arr,]
arr = c(order(data$duration, decreasing=TRUE)[1:3])
data = data[-arr, ]
ggplot(data,aes(x=y, y=duration, fill=y)) +
geom_boxplot()
ggplot(data, aes(x=duration)) +
geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.8)
cols = c("age", "balance", "day", "duration", "campaign", "pdays", "previous")
library(GGally)
ggpairs(data, columns=cols,
ggplot2::aes(colour=y),
title="Correlation matrix")
ggplot(data, aes(x=duration, y=campaign, shape=y, color=y, size=y)) +
geom_point()
ggplot(data, aes(x=contact, y=age, shape=y, color=y, size=y)) +
geom_point()
ggplot(data, aes(x=age, y=balance)) +
geom_point()
# compute correlation matrix
res <- cor(data[, cols])
round(res, 2)
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
data2 = data
data2$age = cut(data2$age, breaks = c(0, 29, 39, 49, 59, 69, 100),
labels = c('<30','30-39','40-49',
'50-59','60-69','70+'
))
data$age[16]
data2 %>%
count(age = factor(age), dep = factor(y)) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x = age, y = pct, fill = dep, label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
data_yes <- data2[which(data2$y == 'yes'), ]  # all yes's of target class
data_yes %>%
count(age = factor(age), dep = factor(y)) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x = age, y = pct, label = scales::percent(pct))) +
geom_col(position = 'dodge', fill="#69b3a2", color="#e9ecef", alpha=0.8) +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
data %>%
count(job = factor(job), dep = factor(y)) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x = job, y = pct, fill = dep, label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)+
theme_grey()+
coord_flip()
# cut balances into
data2 <- data
data2$balance = cut(data2$balance, breaks = c(-5000, -1,  2000, 5000, 10000, 15000, 30000),
labels = c('<0', '0-2000', '2000-5000','50000-10000', '10000-15000', '>150000'
))
data2 %>%
count(balance = factor(balance), dep = factor(y)) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x = balance, y = pct, fill = dep, label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)
data2 <- data
data2$balance = cut(data2$balance, breaks = c(-5000, -1,  5000, 15000, 30000),
labels = c('<0', '0-5000', '5000-15000','>15000'
))
data2$age = cut(data2$age, breaks = c(0, 29, 39, 49, 59, 69, 100),
labels = c('<30','30-39','40-49',
'50-59','60-69','70+'
))
data_yes <- data2[which(data2$y == 'yes'), ]  # all yes's of target class
data_yes %>%
count(age = factor(age), bal = factor(balance)) %>%
mutate(pct = prop.table(n)) %>%
ggplot(aes(x = age, y = pct, fill = bal, label = scales::percent(pct))) +
geom_col(position = 'dodge') +
geom_text(position = position_dodge(width = .9),    # move to center of bars
vjust = -0.5,    # nudge above top of bar
size = 3) +
scale_y_continuous(labels = scales::percent)+
coord_flip()
drop = c("contact", "day")
data = data[,!(names(data) %in% drop)]
str(data)
data$pdays = cut(data$pdays, breaks = c(-2,-1,90,181,272,363,545,max(data$pdays)+1),
labels = c('Never contacted','Under 3months','Under 6months',
'Under 9months','Under 1yr','Under 1.5yrs',
'Over 1.5yrs'))
summary(data$pdays)
save(data, file="preprocessed_data.RData")
#install.packages('fastDummies')
library('fastDummies')
# Create dummy variables:
data_dummy <- dummy_cols(data, select_columns = 'poutcome', remove_selected_columns = TRUE)
head(data_dummy)
summary(data_dummy)
drop = c("poutcome_other")
data_dummy = data_dummy[,!(names(data_dummy) %in% drop)]
str(data_dummy)
data_dummy <- dummy_cols(data_dummy, select_columns = c('job','marital', 'education', 'default', 'housing', 'loan', 'month', 'pdays'), remove_selected_columns = TRUE)
data_dummy %>%
sample_n(., 10, replace=FALSE) %>%
kbl(caption = "Marketing Campaigns of Portuguese Bank (sample of 20)") %>%
kable_classic(full_width = F, html_font = "Cambria")
data_dummy$y <- ifelse(data_dummy$y=="yes",1,0)
data_dummy %>%
summary(.) %>%
kbl(caption = "Basic statistics. Marketing Campaigns of Portuguese Bank") %>%
kable_classic(full_width = F, html_font = "Cambria")
#install.packages('DDoutlier')
library("DDoutlier")
lof <- LOF(data_dummy, k = 5) # outlier score with a neighborhood of 5 points
head(lof)
summary(lof) # some statistics
hist(lof)
plot(sort(lof), type = "l",  main = "LOF (K = 5)",
xlab = "Points sorted by LOF", ylab = "LOF")
lof_with_names = lof
names(lof_with_names) <- 1:nrow(data_dummy)
sort(lof_with_names, decreasing = TRUE)[1:5]
outliers_lof <- which(lof > 2.0)
length(outliers_lof)
outliers_lof
data_dummy = data_dummy[-outliers_lof,]
dim(data_dummy)
str(data_dummy)
?PCA
data_ = data_dummy[2:18]
res.pca = PCA(data_, scale.unit=TRUE, quali.sup = c("y"), ncp=5, graph=F)
res.pca = PCA(data_, scale.unit=TRUE, quali.sup = 7, ncp=5, graph=F)
fviz_eig(res.pca)
?fviz_pca_ind
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
select.ind = list(contrib =50),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_ind(res.pca,
col.ind = data_dummy$y,
repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE ,   # Avoid text overlapping
select.var = list(contrib=10)
)
fviz_pca_var(res.pca,
axes = c(3,4),
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
select.var = list(contrib=10)
)
data_dummy[,"y"] = as.factor(data_dummy[,"y"])
fviz_pca_biplot(res.pca, repel = TRUE,
axes = c(1,2),
col.var = "black", # Variables color
col.ind = data_dummy$y,
addEllipses = TRUE
)
data_dummy[,"y"] = as.factor(data_dummy[,"y"])
fviz_pca_biplot(res.pca, repel = TRUE,
axes = c(1,2),
col.var = "black", # Variables color
col.ind = data_dummy$y,
addEllipses = TRUE
)
library(MASS)
(model <- lda(y~., data = data_dummy))
plot(model)
data_dummy <- data_dummy %>% relocate(y, .after = "pdays_Over 1.5yrs")
str(data_dummy)
set.seed(123)
#Training & Test Datasets
deposit_yes <- data_dummy[which(data_dummy$y == 1), ]  # all yes's of target class
deposit_no <- data_dummy[which(data_dummy$y ==  0), ]  # all no's of target class
deposit_yes_training_rows <- sample(1:nrow(deposit_yes), 0.8*nrow(deposit_yes))  #randomly choosing 80% observations of yes class
deposit_no_training_rows <- sample(1:nrow(deposit_no), 0.8*nrow(deposit_no))  #randomly choosing 80% observations of no class
training_yes <- deposit_yes[deposit_yes_training_rows, ]
training_no <- deposit_no[deposit_no_training_rows, ]
trainingData <- rbind(training_yes, training_no)  #combining chosen observations
glimpse(trainingData)
table(trainingData$y)
# Create Test Data
test_yes <- deposit_yes[-deposit_yes_training_rows, ]
test_no <- deposit_no[-deposit_no_training_rows, ]
testData <- rbind(test_yes, test_no)  #combining chosen observations
glimpse(testData)
table(testData$y)
#save(trainingData, testData, trainingData_scaled, testData_scaled, file = "data.RData")
save(trainingData, testData, file = "data.RData")
